#!/bin/bash

# Parámetros
enter="\n"
tab="\t"
color="#00FF00"

# Definir códigos de colores predeterminados
COLOR_DEFAULT="#00FF00"
COLOR_ERROR="#FF0000"

# Función para manejar errores
handle_error() {
    echo "Error: $1"
    # Establecer color de error para datos no disponibles
    COLOR_DEFAULT=$COLOR_ERROR
    lan_ip=""
    wan_ip=""
    dns=""
    location=""
    isp=""
    cpu=""
    ram=""
    swap=""
    root_output=""
    home_output=""
    storage_output=""
    server_times=()
    server_target=""
}

# Obtener datos del sistema
hostname=$(uname -n)
username=$(whoami)

# Obtener fecha, hora y zona horaria
datetime_output=$(date "+%d/%m/%Y %H:%M:%S %Z")
date=$(echo $datetime_output | cut -d ' ' -f 1)
time=$(echo $datetime_output | cut -d ' ' -f 2)
timezone=$(echo $datetime_output | cut -d ' ' -f 3)

# Obtener resolución de pantalla
xrandr_output=$(xrandr)
resolution_line=$(echo "$xrandr_output" | grep 'primary')
if [ ! -z "$resolution_line" ]; then
    width_height=$(echo $resolution_line | awk '{print $4}')
    width=$(echo $width_height | cut -d 'x' -f 1)
    height=$(echo $width_height | cut -d 'x' -f 2 | cut -d '+' -f 1)
else
    handle_error "No se pudo encontrar la línea de resolución en la salida de xrandr."
    exit 1
fi

# Obtener datos de red
dns_output=$(cat /etc/resolv.conf | grep nameserver)
dns=$(echo "$dns_output" | awk '{print $2}')

# Obtener datos de IP
lan_ip=$(ip -4 addr show dev eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -n 1)
wan_ip=$(curl -s ifconfig.me)

# Obtener datos de hardware
top_output=$(top -bn1)
cpu_output=$(echo "$top_output" | sed -n '3p')
ram_output=$(free | sed -n '2p')
swap_output=$(free -m | sed -n '2p')
df_output=$(df -h)

cpu=$((100 - $(echo "$cpu_output" | awk -F ',' '{print $4}' | awk -F '.' '{print $1}')))
ram=$(echo "$ram_output" | awk '{print ($3/$2)*100}')
swap=$(echo "$swap_output" | awk '{print ($3/$2)*100}')
root_output=$(echo "$df_output" | sed -n '2p' | awk '{print $5}')
home_output=$(echo "$df_output" | sed -n '3p' | awk '{print $5}')
storage_output=$(echo "$df_output" | sed -n '4p' | awk '{print $5}')

# Obtener datos de los servidores
target_file="$HOME/.tmp/target"
if [ -f "$target_file" ]; then
    target=$(cat "$target_file")
else
    handle_error "El archivo de destino no existe."
    exit 1
fi

servers=("google.com" "fr.fhnx.es" "de.fhnx.es" "uk.fhnx.es" "ca.fhnx.es" "sg.fhnx.es")
server_times=()
for server in "${servers[@]}"; do
    ping_output=$(ping -c 1 "$server")
    time_ms=$(echo "$ping_output" | tail -n 2 | head -n 1 | awk '{print $7}' | cut -d '/' -f 3)
    server_times+=("$time_ms")
done

server_target=$(ping -c 1 "$target" | tail -n 2 | head -n 1 | awk '{print $7}' | cut -d '/' -f 3)

# Obtener datos de la IP
isp_data=$(curl -s ipwho.is)
location=$(echo "$isp_data" | jq -r '.continent + ", " + .country + ", " + .region + ", " + .city')
isp=$(echo "$isp_data" | jq -r '.connection.isp')

# Generar archivo de datos
cat > "$HOME/Pictures/data.pango" << EOF
<markup>
            





            <span foreground="${COLOR_DEFAULT}">System</span>
            <span foreground="${COLOR_DEFAULT}"> -------------------------- </span>
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${hostname}
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${username}

            <span foreground="${COLOR_DEFAULT}">Date</span>
            <span foreground="${COLOR_DEFAULT}"> -------------------------- </span>
            <span foreground="${COLOR_DEFAULT}">󰃮</span>${tab}:${tab}${date}
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${time}
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${timezone}

            <span foreground="${COLOR_DEFAULT}">Network</span>
            <span foreground="${COLOR_DEFAULT}"> -------------------------- </span>
            <span foreground="${COLOR_DEFAULT}">󰌗</span>${tab}:${tab}${lan_ip}
            <span foreground="${COLOR_DEFAULT}">󰖈</span>${tab}:${tab}${wan_ip}
            <span foreground="${COLOR_DEFAULT}">󰇖</span>${tab}:${tab}${dns}
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${location}
            <span foreground="${COLOR_DEFAULT}">󰒍</span>${tab}:${tab}${isp}

            <span foreground="${COLOR_DEFAULT}">Hardware</span>
            <span foreground="${COLOR_DEFAULT}"> -------------------------- </span>
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${cpu}%
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${ram}%
            <span foreground="${COLOR_DEFAULT}">󰯍</span>${tab}:${tab}${swap}%
            <span foreground="${COLOR_DEFAULT}">󰴉</span>${tab}:${tab}${root_output}
            <span foreground="${COLOR_DEFAULT}">󱂵</span>${tab}:${tab}${home_output}
            <span foreground="${COLOR_DEFAULT}">󰡰</span>${tab}:${tab}${storage_output}

            <span foreground="${COLOR_DEFAULT}">Servers</span>
            <span foreground="${COLOR_DEFAULT}"> -------------------------- </span>
            <span foreground="${COLOR_DEFAULT}"></span>${tab}:${tab}${server_times[0]} ms
            <span foreground="${COLOR_DEFAULT}">󰒋</span>${tab}:${tab}${server_times[1]} ms
            <span foreground="${COLOR_DEFAULT}">󰒋</span>${tab}:${tab}${server_times[2]} ms
            <span foreground="${COLOR_DEFAULT}">󰒋</span>${tab}:${tab}${server_times[3]} ms
            <span foreground="${COLOR_DEFAULT}">󰒋</span>${tab}:${tab}${server_times[4]} ms
            <span foreground="${COLOR_DEFAULT}">󰒋</span>${tab}:${tab}${server_times[5]} ms
            <span foreground="${COLOR_DEFAULT}">󰓾</span>${tab}:${tab}${target,server_target} ms

</markup>
EOF

# Establecer fondo de pantalla
pango-view --background=#000000 --foreground=#FFFFFF --font=Hack Nerd Font --markup --gravity=auto --width="$width" --height="$height" -qo "$HOME/Pictures/wallpaper.png" "$HOME/Pictures/data.pango"
feh --bg-fill "$HOME/Pictures/wallpaper.png"